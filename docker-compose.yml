services:
  redis:
    image: redis:7
    container_name: peerquest-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
  
  backend:
    build:
      context: ./PeerQuestBackEnd
    container_name: peerquest-backend
    # Use Django dev server for hot reload in development
    command: >
      sh -c "if [ \"$USE_DJANGO_DEV_SERVER\" = 'true' ]; then python manage.py runserver 0.0.0.0:8000; else daphne -b 0.0.0.0 -p 8000 core.asgi:application; fi"
    volumes:
      - ./PeerQuestBackEnd:/app
    # Optional: Mount venv for pip cache (uncomment if needed)
    # - ./PeerQuestBackEnd/venv:/app/venv
    ports:
      - "8000:8000"
    depends_on:
      - redis
    env_file:
      - /PeerQuestBackEnd/.env
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - USE_DJANGO_DEV_SERVER=true
      # Add any other env vars you need
  frontend:
    build:
      context: ./PeerQuestFrontEnd
    container_name: peerquest-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./PeerQuestFrontEnd:/app
      - /app/node_modules
      # .next is built output, not needed for dev hot reload
    depends_on:
      - backend
    env_file:
      - ./PeerQuestFrontEnd/.env.local
    # For development, set NODE_ENV to development or remove it (Next.js defaults to dev mode)
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true

  mysql:
    image: mysql:8
    container_name: peerquest-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: peerquestdb
      MYSQL_USER: peerquestuser
      MYSQL_PASSWORD: peerquestpass
    volumes:
      - mysql_data:/var/lib/mysql

volumes:
  mysql_data: